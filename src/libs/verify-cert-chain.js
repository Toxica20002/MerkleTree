
var forge = require('node-forge');
var pki = forge.pki;

const hcmiu_cert_chain_pem = `-----BEGIN CERTIFICATE-----
MIIGrTCCBZWgAwIBAgIMSopEWaQ5lurOo7uxMA0GCSqGSIb3DQEBCwUAMFAxCzAJ
BgNVBAYTAkJFMRkwFwYDVQQKExBHbG9iYWxTaWduIG52LXNhMSYwJAYDVQQDEx1H
bG9iYWxTaWduIFJTQSBPViBTU0wgQ0EgMjAxODAeFw0xOTA2MjYwNzEyMDJaFw0y
MDEyMzEwNzMzNDFaMIGjMQswCQYDVQQGEwJWTjEOMAwGA1UECBMFSGFub2kxDjAM
BgNVBAcTBUhhbm9pMRYwFAYDVQQLEw1JVCBEZXBhcnRtZW50MT4wPAYDVQQKEzVW
SUVUVEVMIFRFTEVDT00gQ09SUE9SQVRJT04gLSBCUkFOQ0ggT0YgVklFVFRFTCBH
Uk9VUDEcMBoGA1UEAwwTKi52aWV0dGVsdGVsZWNvbS52bjCCASIwDQYJKoZIhvcN
AQEBBQADggEPADCCAQoCggEBAMthOdj2sHXFR7ujP/OLENMJ1kgOED+u6yk+DJSn
vcjuUN8m0usl+Wk0JJ/vpqYOBHT3Umm4HGwEMa9NV4iB+0NwHwl4pin3na0aNV4/
fgEi8pKlr8mg4cnlUj1dGq4SrCzzr+3Mq81CBKibYFh8ba/EkAU7fdmA+E3dDyb9
LyEjAAT7rLnSa3N70Ifq9TJqVS0EOEIMqdv5aN2JtEAUw1oOt+UKjtyduzQeMfAg
qQpNiLf5hTaHI1qYOnaNlze+0v9q2Q8p3RhpwEMDS/2Wj+RbYEbRDz1BLH6Zm9fR
gWJ7pZwglfXbjnEZHpWqsd3Tsz2N/hsrLvZ8FlBM8oU1WzUCAwEAAaOCAzEwggMt
MA4GA1UdDwEB/wQEAwIFoDCBjgYIKwYBBQUHAQEEgYEwfzBEBggrBgEFBQcwAoY4
aHR0cDovL3NlY3VyZS5nbG9iYWxzaWduLmNvbS9jYWNlcnQvZ3Nyc2FvdnNzbGNh
MjAxOC5jcnQwNwYIKwYBBQUHMAGGK2h0dHA6Ly9vY3NwLmdsb2JhbHNpZ24uY29t
L2dzcnNhb3Zzc2xjYTIwMTgwVgYDVR0gBE8wTTBBBgkrBgEEAaAyARQwNDAyBggr
BgEFBQcCARYmaHR0cHM6Ly93d3cuZ2xvYmFsc2lnbi5jb20vcmVwb3NpdG9yeS8w
CAYGZ4EMAQICMAkGA1UdEwQCMAAwSAYDVR0RBEEwP4ITKi52aWV0dGVsdGVsZWNv
bS52boIVd3d3LnZpZXR0ZWx0ZWxlY29tLnZughF2aWV0dGVsdGVsZWNvbS52bjAd
BgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwHwYDVR0jBBgwFoAU+O9/8s14
Z6jeb48kjYjxhwMCs+swHQYDVR0OBBYEFDYKW/77hldBxyLK0+KSAtK+0huvMIIB
fAYKKwYBBAHWeQIEAgSCAWwEggFoAWYAdgC72d+8H4pxtZOUI5eqkntHOFeVCqtS
6BqQlmQ2jh7RhQAAAWuSoI0uAAAEAwBHMEUCIQCaBUHGZ8CwVGSbMUa+IG4D2+2S
Ig4OU9n1oVVVGA0bxwIgHpyvbjWBbLc+lwbR+U91H1i+iIh/KTJnHE53gAvQteQA
dQBvU3asMfAxGdiZAKRRFf93FRwR2QLBACkGjbIImjfZEwAAAWuSoI1eAAAEAwBG
MEQCIDC+iFendcXSzv9bxL4aGugB2rP08YIi3PUcENxY5HkvAiAuXzRaOSlCwhKh
GiVQ+mwRAe7TjVgtAlc1vJQckHDX9gB1AId1v+dZfPiMQ5lfvfNu/1aNR1Y2/0q1
YMG06v9eoIMPAAABa5Kgj38AAAQDAEYwRAIgdSHd6RCP1yKtIKhOfUwsTZ72fMRM
GYJA6etX80wup6kCIGrC56tIiQo+/A7qIeCic/xnRRaxmymIb66tsjgDjj1uMA0G
CSqGSIb3DQEBCwUAA4IBAQBJ/DWAFqTuPlrXO4nS2fchADcAMOMj3eg8kLDM86vR
HBhQIuOoUcv11FoHwEo2uxPUFKYpQp5Vl5Bn/oBBQIp33rrRQGYBC+2Z+udwl4Bc
zRab48d8183Txt1GAs/BuE6rlFh34l5YH1OJWRXuRXpqhblB9ps0KF+4SvK6KR4A
c6egFF5IrnEZb56sG4jm17ZWihoQNMDKjo8J2nFTrJE0Xwwl7VT4Ma0Qor9je+BH
k4FVM5Oh1vKGTrsA7NtcNwtahzxonCL+Dl/DoKy0fxFYo9akcL3aoA654J0YuW01
X4lGF/L07F6fTTqykKgdNrY4tI3ASoIz3HCPGyMZnwZi
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIETjCCAzagAwIBAgINAe5fIh38YjvUMzqFVzANBgkqhkiG9w0BAQsFADBMMSAw
HgYDVQQLExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBSMzETMBEGA1UEChMKR2xvYmFs
U2lnbjETMBEGA1UEAxMKR2xvYmFsU2lnbjAeFw0xODExMjEwMDAwMDBaFw0yODEx
MjEwMDAwMDBaMFAxCzAJBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9iYWxTaWduIG52
LXNhMSYwJAYDVQQDEx1HbG9iYWxTaWduIFJTQSBPViBTU0wgQ0EgMjAxODCCASIw
DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKdaydUMGCEAI9WXD+uu3Vxoa2uP
UGATeoHLl+6OimGUSyZ59gSnKvuk2la77qCk8HuKf1UfR5NhDW5xUTolJAgvjOH3
idaSz6+zpz8w7bXfIa7+9UQX/dhj2S/TgVprX9NHsKzyqzskeU8fxy7quRU6fBhM
abO1IFkJXinDY+YuRluqlJBJDrnw9UqhCS98NE3QvADFBlV5Bs6i0BDxSEPouVq1
lVW9MdIbPYa+oewNEtssmSStR8JvA+Z6cLVwzM0nLKWMjsIYPJLJLnNvBhBWk0Cq
o8VS++XFBdZpaFwGue5RieGKDkFNm5KQConpFmvv73W+eka440eKHRwup08CAwEA
AaOCASkwggElMA4GA1UdDwEB/wQEAwIBhjASBgNVHRMBAf8ECDAGAQH/AgEAMB0G
A1UdDgQWBBT473/yzXhnqN5vjySNiPGHAwKz6zAfBgNVHSMEGDAWgBSP8Et/qC5F
JK5NUPpjmove4t0bvDA+BggrBgEFBQcBAQQyMDAwLgYIKwYBBQUHMAGGImh0dHA6
Ly9vY3NwMi5nbG9iYWxzaWduLmNvbS9yb290cjMwNgYDVR0fBC8wLTAroCmgJ4Yl
aHR0cDovL2NybC5nbG9iYWxzaWduLmNvbS9yb290LXIzLmNybDBHBgNVHSAEQDA+
MDwGBFUdIAAwNDAyBggrBgEFBQcCARYmaHR0cHM6Ly93d3cuZ2xvYmFsc2lnbi5j
b20vcmVwb3NpdG9yeS8wDQYJKoZIhvcNAQELBQADggEBAJmQyC1fQorUC2bbmANz
EdSIhlIoU4r7rd/9c446ZwTbw1MUcBQJfMPg+NccmBqixD7b6QDjynCy8SIwIVbb
0615XoFYC20UgDX1b10d65pHBf9ZjQCxQNqQmJYaumxtf4z1s4DfjGRzNpZ5eWl0
6r/4ngGPoJVpjemEuunl1Ig423g7mNA2eymw0lIYkN5SQwCuaifIFJ6GlazhgDEw
fpolu4usBCOmmQDo8dIm7A9+O4orkjgTHY+GzYZSR+Y0fFukAj6KYXwidlNalFMz
hriSqHKvoflShx8xpfywgVcvzfTO3PYkz6fiNJBonf6q8amaEsybwMbDqKWwIX7e
SPY=
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIDXzCCAkegAwIBAgILBAAAAAABIVhTCKIwDQYJKoZIhvcNAQELBQAwTDEgMB4G
A1UECxMXR2xvYmFsU2lnbiBSb290IENBIC0gUjMxEzARBgNVBAoTCkdsb2JhbFNp
Z24xEzARBgNVBAMTCkdsb2JhbFNpZ24wHhcNMDkwMzE4MTAwMDAwWhcNMjkwMzE4
MTAwMDAwWjBMMSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBSMzETMBEG
A1UEChMKR2xvYmFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2lnbjCCASIwDQYJKoZI
hvcNAQEBBQADggEPADCCAQoCggEBAMwldpB5BngiFvXAg7aEyiie/QV2EcWtiHL8
RgJDx7KKnQRfJMsuS+FggkbhUqsMgUdwbN1k0ev1LKMPgj0MK66X17YUhhB5uzsT
gHeMCOFJ0mpiLx9e+pZo34knlTifBtc+ycsmWQ1z3rDI6SYOgxXG71uL0gRgykmm
KPZpO/bLyCiR5Z2KYVc3rHQU3HTgOu5yLy6c+9C7v/U9AOEGM+iCK65TpjoWc4zd
QQ4gOsC0p6Hpsk+QLjJg6VfLuQSSaGjlOCZgdbKfd/+RFO+uIEn8rUAVSNECMWEZ
XriX7613t2Saer9fwRPvm2L7DWzgVGkWqQPabumDk3F2xmmFghcCAwEAAaNCMEAw
DgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFI/wS3+o
LkUkrk1Q+mOai97i3Ru8MA0GCSqGSIb3DQEBCwUAA4IBAQBLQNvAUKr+yAzv95ZU
RUm7lgAJQayzE4aGKAczymvmdLm6AC2upArT9fHxD4q/c2dKg8dEe3jgr25sbwMp
jjM5RcOO5LlXbKr8EpbsU8Yt5CRsuZRj+9xTaGdWPoO4zzUhw8lo/s7awlOqzJCK
6fBdRoyV3XpYKBovHd7NADdBj+1EbddTKJd+82cEHhXXipa0095MJ6RMG3NzdvQX
mcIfeg7jLQitChws/zyrVQ4PkX4268NXSb7hLi18YIvDQVETI53O9zJrlAGomecs
Mx86OyXShkDOOyyGeMlhLxS67ttVb9+E7gUJTb0o2HLO02JQZR7rkpeDMdmztcpH
WD9f
-----END CERTIFICATE-----`

// Handle cert chain. A chain consists of 3 certs: end-user-cert, intermediate-cert, and root-cert

const PEM_BEGIN = "-----BEGIN CERTIFICATE-----";
const PEM_END = "-----END CERTIFICATE-----";

const cert_chain_pem = hcmiu_cert_chain_pem;

const certs_list =
    hcmiu_cert_chain_pem
        .split(new RegExp(PEM_BEGIN + "|" + PEM_END, "g"))
        .filter(s => { return s.length > 1 });
console.log("num certs in chain: " + certs_list.length);

let caStore = pki.createCaStore();
certs_list.map(cert => {
    caStore.addCertificate(PEM_BEGIN + cert + PEM_END)
});

let current_cert = pki.certificateFromPem(PEM_BEGIN + certs_list[0] + PEM_END);

let verificationResult = true;
for (let i = 0; i < 3; i++) {
    console.log(current_cert.subject);

    issuer = caStore.getIssuer(current_cert);
    verificationResult &= issuer.verify(current_cert);

    current_cert = issuer;
    //NOTE: issuer of a root cert is itself
    issuer = caStore.getIssuer(current_cert);
}

console.log("CERT CHAIN VERIFICATION");
if (verificationResult) {
    console.log("Verified")
}
else {
    console.log("NOT verified");
}
